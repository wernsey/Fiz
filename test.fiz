# Test the looping behaviour
set a 0
while {expr $a < 100} {
	incr a; 
	# Test the continue statement
	if {expr $a = 4} continue; 
	puts $a; 
	# Test the break statement
	if {expr $a=8} break
}

# The following should work:
set x pu
set y ts
$x$y "hello world"

# Test recursion, through a factorial function
proc fac {x} {
	if {expr $x<2} {return 1}; 
	return [expr $x*[fac [expr $x-1]]]
	}
puts "5! = [fac 5]"

dict numbers put alice "FAIL"  
dict numbers put alice 1111222 # Replace alice's number with something sane
dict numbers put bob 2222333
dict numbers put carol 3333444
dict numbers put dwayne 5555666
dict numbers put edgar 6666777
dict numbers foreach k v do {puts "$k's number is $v"}
dict numbers remove alice
puts "** After removing alice:"
dict numbers foreach k v do {puts "$k's number is $v"}

set a hello
set b world
if {eq $a $b} {puts FAIL} else {puts WIN}
if {ne $a $b} {puts WIN} else {puts FAIL}
if {eq $a $a} {puts WIN} else {puts FAIL}
if {ne $b $b} {puts FAIL} else {puts WIN}




set i 1
proc set_i_to_2 {} {
	# puts "local $i" --- this would be an error
	set i 2 
	puts "local $i"
}
proc set_i_to_3 {} {
	global i
	puts "local $i"
	set i 3 
	puts "local $i"
}

puts "top $i"
assert { eq $i 1 }
# prints "top 1"

set_i_to_2
# prints "local 2"

puts "top $i"
assert { eq $i 1 }
# prints "top 1"
# note: was not set to "2" - it was a local variable

set_i_to_3
# prints "local 1"
# prints "local 3"

puts "top $i"
assert { eq $i 3 }
# prints "top 3"
# note: was not set to "3" - it was a global variable



set i 0
proc increment_i {} {
	global i
	set i [expr $i + 1]
}
increment_i
increment_i
increment_i
increment_i
increment_i
puts "i = $i"
assert { eq $i 5 }
# prints "i = 5"



proc set_never_used_before_global {} {
	global vvv
	set vvv 123
}

set_never_used_before_global

puts $vvv
assert { eq $vvv 123 }


set messageVar "(none)"

puts "cought=[catch { assert { eq 1 1 } } messageVar] $messageVar"
# prints "cought=0 (none)"

puts "cought=[catch { assert { eq 1 2 } } messageVar] $messageVar"
# prints "cought=1 Assertion failed:  eq 1 2"


if { expr [catch { assert { eq 1 2 } } messageVar]} {
  puts "Cought error: $messageVar"
}
# prints "Cought error 1: Assertion failed:  eq 1 2"

if { expr [catch { assert { eq 2 2 } } messageVar]} {
  puts "should not happen"
}
# doesn't print anything, because the `eq 2 2` assertion succeeded